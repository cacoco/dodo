#!/usr/bin/env bash
set -euo pipefail

#######################################################################
# Helper functions for Dodo Build and Publish scripts
#######################################################################
VERSION="24.5.0"
NAME="Dodo Functions"

# Constants
PHABRICATOR="phabricator.twitter.biz"

# Retries a command on failure
# @param $1 - the maximum number of attempts
# @param $2 - the command to run
function retry {
    local max_attempts=$1; shift
    local cmd=( "$@" )
    local attempt=1

    until eval "${cmd[*]}"
    do
        if (( attempt == max_attempts ))
        then
            log "info" "Command failed, max attempts: $max_attempts exceeded."
            return 1
        else
            log "info" "Command failed. Retrying..."
            ((attempt++))
            sleep 1
        fi
    done
}

# Note: does not work if the message contains an array
function log {
    local severity=$1
    local message=$2
    local -r lowercaseSeverity=$(echo "$severity" | awk '{print tolower($0)}')
    echo "[$lowercaseSeverity] $message"
}
log "info" "------------------------------------------------------------------------"
log "info" "Twitter $NAME version v$VERSION"
log "info" "------------------------------------------------------------------------"
log "info" " "

# shellcheck disable=SC2154
function contains_project {
  local element=$1
  for project in "${project_list[@]}"; do [[ "$project" == "$element" ]] && return 0; done
  return 1
}

function array_get {
    local array=$1 index=$2
    local i="${array}_$index"
    printf '%s' "${!i}"
}

function check_arg {
    local arg=$1
    if [[ $arg == --* ]]; then
        log "error" "Unrecognized argument: $arg" >&2
        print_usage >&2
        exit 1
    fi
}

function fetch_branches {
  # twitter/finatra has issues unless we manually set the remote.origin.fetch
  local -r gitcfg_cmd="git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*"
  log "info" "$gitcfg_cmd"
  eval "$gitcfg_cmd"
  local -r release_head_commit_ts=$(git show -s --format=%ct HEAD)
  local -r fetch_cmd="git fetch --no-tags --prune --shallow-since=$release_head_commit_ts origin +refs/heads/*:refs/remotes/origin/*"
  log "info" "$fetch_cmd"
  eval "$fetch_cmd"
}

# shellcheck disable=SC2154
function merge_release {
    # use the phab_id to find the correct commit from the develop branch.
    git checkout develop > /dev/null 2>&1; git pull > /dev/null 2>&1
    local diff_id="$phab_id"
    local -r sha=$(git log -1 --pretty=format:"%H" --fixed-strings --grep="$PHABRICATOR/$diff_id")
    if [[ -z "$sha" ]]; then
      log "error" "Unable to find corresponding SHA in $project for PHABRICATOR ID = $phab_id."
      log "error" "Latest commits in 'release' branch:"
      git log -n 20 --oneline origin/release
      log "error" "Latest commits in 'develop' branch:"
      git log -n 20 --oneline origin/develop
      exit 1
    fi
    log "info" "Phabricator differential: $phab_id @ $sha"

    local -r commit_message=$(curl -s https://api.github.com/repos/twitter/"$project"/commits/"$sha" | jq '.commit.message' | sed 's/\`//g' | sed 's/\\n.*//' | sed 's/\"//g')
    local -r author=$(curl -s https://api.github.com/repos/twitter/"$project"/commits/"$sha" | jq '.commit.author.name' | sed 's/\"//g')
    git checkout release > /dev/null 2>&1; git pull > /dev/null 2>&1

    log "info" "Commit SHA: $project @ $sha"
    log "info" "Commit message: $commit_message"
    log "info" "Commit author: $author"

    log "info" ""
    log "info" "Merging $sha into release branch"
    merge_command="git merge $sha"
    log "info" "$merge_command"
    if [[ "$dry_run" = false ]]; then
        eval "$merge_command"
    fi

    log "info" " "
}
