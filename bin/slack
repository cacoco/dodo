#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC1091
# shellcheck disable=SC1090
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/functions"

#######################################################################
# Script for sending Slack notifications for release snapshot publishing.
#
# See: print_usage function for usage.
#######################################################################
VERSION="24.2.0"
NAME="Dodo Slack Notifications"

GITHUB_LOGO="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png?size=48"
SLACK_URL=${SLACK_WEBHOOK:?}
WORKSPACE=${GITHUB_WORKSPACE:-.}
IS_CI=${CI:-false}

# Initialize defaults
is_dry_run=false      # If the action was a dry run.
message=""            # Message to send.
color="#000000"       # Attachment side-bar color. Default: #000000 (black).

function print_usage {
    echo "USAGE: $0 --success true --verbose"
    echo "Options:
  --message        The message to post. Default empty.
  --denote-dry-run If the action was a dry run. Default false.
  --color          Hex code for attachment side-base color. Default: #000000 (black).
  --verbose        Run in verbose mode. Default: false.
  --help           Print usage."
}

# see: https://api.slack.com/reference/messaging/attachments#example
# todo: parameterize the title as well to make this generically useful
function post() {
  FORMATTED=$(date +%s)
  local dryRunText=""
  if [[ "$is_dry_run" == true ]]; then
    dryRunText=" [DRY RUN]"
  fi
  local data="{\"attachments\": [{\"blocks\": [], \"mrkdwn_in\": [\"text\" ], \"color\": \"$color\", \"author_name\": \"twitter/dodo\", \"author_link\": \"https://github.com/twitter/dodo\", \"author_icon\": \"https://www.pngfind.com/pngs/m/597-5971921_dodo-flightless-bird-extinction-ark-dodo-bird-no.png\", \"title\": \"Workflow: ${GITHUB_WORKFLOW}/${GITHUB_ACTION} [${GITHUB_RUN_ID}/${GITHUB_RUN_NUMBER}]${dryRunText}\", \"title_link\": \"https://github.com/twitter/dodo/actions?query=workflow%3A${GITHUB_WORKFLOW}\", \"text\": \"$message\", \"footer\": \"twitter/dodo\", \"footer_icon\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\", \"ts\": $FORMATTED}]}"

  local slack_curl_cmd="curl -sD - -o /dev/null -X POST -H \"Content-Type: application/json\" -d '$data' \"$SLACK_URL\""
  log "info" "$slack_curl_cmd"
  eval "$slack_curl_cmd"
}

function echo_set_options {
    if [[ "$verbose" = true ]]; then
        log "debug" "------------------------------------------------------------------------"
        current_date=$(date "+%YT%H:%M:%S%z")
        log "debug" "Twitter $NAME v$VERSION ($current_date)"
        log "debug" ""
        log "debug" "--- java version ---"
        version=$(java -version 2>&1); version_lines=$(echo java -version 2>&1 | wc -l)
        i=1; while [ "$i" -le "$version_lines" ]; do
            line=$(echo "$version" | head -n $i | tail -n 1)
            log "debug" "  $line"
            i=$((i + 1))
        done
        log "debug" ""
        log "debug" "--- env ---"
        log "debug" "  WORKSPACE = $WORKSPACE"
        log "debug" "  CI        = $IS_CI"
        log "debug" ""
        log "debug" "--- options ---"
        log "debug" "  dry-run   = $is_dry_run"
        log "debug" "  message   = $message"
        log "debug" "  color     = $color"
        log "debug" ""
    fi
}

# BEGIN: OPTION PARSING AND VALIDATION ------------------------------------------------------------------
# Simple option parsing. We could use getopts but rather use "long"
# names only. And this is position-agnostic to the options, e.g.,
# these options can occur before or after the main arguments.
shift_count="0"
for arg in "$@"; do
  shift
  case "$arg" in
    "--denote-dry-run") is_dry_run=$1; ((shift_count+=1)) ;;
    "--message")        message=$1; ((shift_count+=1)) ;;
    "--color")          color=$1; ((shift_count+=1)) ;;
    "--verbose")        verbose=true ;;
    "--help")           print_usage >&2; exit ;;
    *)                  check_arg $arg;set -- "$@" "$arg"
  esac
done

# BEGIN: EXECUTE BUILD ----------------------------------------------------------------------------------
SECONDS=0

echo_set_options
post

duration="$SECONDS"
FORMATTED=$(date "+%YT%H:%M:%S%z")
log "info" "------------------------------------------------------------------------"
log "info" "SLACK NOTIFICATION SUCCESS"
log "info" "------------------------------------------------------------------------"
log "info" "Total time: $duration s"
log "info" "Finished at: $FORMATTED"
log "info" "Twitter $NAME version v$VERSION"
log "info" "------------------------------------------------------------------------"
# END: EXECUTE BUILD ------------------------------------------------------------------------------------

